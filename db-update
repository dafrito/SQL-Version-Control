#!/bin/bash
# Updates a database by running patches
PATH=/bin:/usr/bin:$HOME/bin:${0%/*}

source db-library.sh
source db-load-settings.sh;
source db-get-password.sh;

installed=$TEMP_ROOT/installed
staged=$TEMP_ROOT/staged
tables_before=$TEMP_ROOT/tables-before
tables_after=$TEMP_ROOT/tables-after
last_error=$TEMP_ROOT/error

load_tables
touch $installed
if egrep -qx "patches" <$TABLES; then
    sql "select patch from patches order by order_applied" >$installed
else
    NEW=0
fi

function patch_allowed {
    if ! echo $1 | grep -q '^@'; then
        return 0;
    fi
    while ! echo $1 | grep -q '^@'; do
        if [ "@$BUILD" == $1 ]; then
            return 0
        fi
        shift
    done
    return 1
}

function get_staged {
    IFS='
'
    for patch in $(cat $1)
    do
        patch=${patch%%#*}
        if [ -z "$patch" ]; then
            continue
        fi
        IFS='   '
        set -- $patch >/dev/null
        if ! patch_allowed $*; then
            continue
        fi
        while echo $1 | grep -q '^@'; do
            shift
        done
        if echo $1 | grep -q '\.list'; then
            if [ -e $root/$1 ]; then
                get_staged $root/$1
            elif [ -e $1 ]; then
                get_staged $1
            else
                error "$1 does not exist in '$root' or current dir"
            fi
        elif [ ! -e $root/$1 ]; then
            error "$1 does not exist in $root"
            exit 1
        elif ! egrep $1 <$installed >/dev/null; then
            echo $*
        fi
    done 
}

get_staged $patchlist >$staged
if [ ! -s "$staged" ]; then
    echo "db: $db up-to-date" 1>&2
    exit 0;
fi
if [ ! $FORCE ]; then
    echo "Available updates for $db:"
    cat -n $staged | awk '{ print $1 ". " $2 }'
    read -p"Install updates to $db? (y/n): " r
    case $r in
        y*) ;;
        *) exit 1
    esac
fi

perform_hook "update-pre"

if [ $NEW ]; then
    if [ -s $DB_UTILS_ROOT/init.sql ]; then
        sql_file $DB_UTILS_ROOT/init.sql
    fi
    if [ -s $CONFIG_ROOT/init.sql ]; then
        sql_file $CONFIG_ROOT/init.sql
    fi
    if [ -s $BUILD_CONFIG_ROOT/init.sql ]; then
        sql_file $BUILD_CONFIG_ROOT/init.sql
    fi
fi

function log_table {
    sql_raw "insert into patch_changelog (patch, table_name, type) values ('$2', '$3', '$1')" 2>$last_error
    if [ -s $last_error ]; then
        error=`cat $last_error`
        echo $error | egrep "^ERROR 1062 " >/dev/null && echo $error | egrep "$2"-"$3" >/dev/null && return
        error $error
    fi
}

function get_filtered_tables {
    load_tables
    source db-filter-tables.sh <$TABLES | sort >$1
}

IFS='
'
i=1
for patch in `cat $staged`
do
    IFS='   '
    set $patch
    patch_name=$1
    echo "$i. $patch_name"
    let i++
    shift
    get_filtered_tables $tables_before
    perform_hook "patch-pre"
    pushd $root >/dev/null
    case $patch_name in
        *.sql)
            sql_file $patch_name >>$log ;;
        *)
            if ! source $patch_name >>$log; then
                exit 2
            fi ;;
    esac
    sql "insert into patches (patch, who_applied) values ('$patch_name', '$(whoami)');"
    popd >/dev/null
    perform_hook "patch-post"
    get_filtered_tables $tables_after
    IFS='
'
    for line in `diff -U 0 $tables_before $tables_after`; do
        case $line in
            ---*|+++*|@@*) continue ;;
            +*) log_table 'create' $patch_name ${line:1} ;;
            -*) log_table 'drop' $patch_name ${line:1} ;;
        esac
    done;
    IFS='   '
    for table; do
        case $table in
            +*) 
                table=${table:1};
                if egrep -x "$table" <$tables_before >/dev/null; then
                    error "'$table' existed before '$patch_name' was executed"
                fi
                if ! egrep -x "$table" <$tables_after >/dev/null; then
                    error "'$table' does not exist, even though '$patch_name' claimed to have created it"
                fi
                log_table 'create' $patch_name ${line:1} ;log_table 'create' $patch_name ${line:1}
                ;;
            -*) 
                table=${table:1};
                if ! egrep -x "$table" <$tables_before >/dev/null; then
                    error "'$table' does not exist, and could not have been removed by '$patch_name'"
                fi
                if egrep -x "$table" <$tables_after >/dev/null; then
                    error "'$table' still exists, even though '$patch_name' claimed to have removed it"
                fi
                log_table 'drop' $patch_name ${line:1} 
                ;;
            *) 
                if egrep -x "$table" <$tables_before >/dev/null; then
                    if egrep -x "$table" <$tables_after >/dev/null; then
                        log_table 'alter' $patch_name $table
                    else
                        log_table 'drop' $patch_name $table
                    fi
                elif egrep -x "$table" <$tables_after >/dev/null; then
                    log_table 'create' $patch_name $table
                else
                    error "'$table' was not created or removed, but was listed for '$patch_name'"
                fi
        esac
    done
done;

perform_hook "update-post"

if [ $dump ]; then
    source db-dump >$BUILD-dump.sql
fi
